// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Text$BsReactNative = require("bs-react-native/lib/js/src/components/text.js");
var View$BsReactNative = require("bs-react-native/lib/js/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/lib/js/src/style.js");
var Button$BsReactNative = require("bs-react-native/lib/js/src/components/button.js");

function chunk(param) {
  return (Math.random().toString(36).substring(7));
}

function randomString(param) {
  return chunk(/* () */0) + ("-" + chunk(/* () */0));
}

var container = Style$BsReactNative.style(/* :: */[
      Style$BsReactNative.flex(2),
      /* :: */[
        Style$BsReactNative.flexDirection(/* RowReverse */1),
        /* :: */[
          Style$BsReactNative.justifyContent(/* Center */2),
          /* :: */[
            Style$BsReactNative.alignItems(/* Center */2),
            /* :: */[
              Style$BsReactNative.backgroundColor(/* String */Block.__(0, ["#3399FF"])),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var text = Style$BsReactNative.style(/* :: */[
      Style$BsReactNative.color(/* String */Block.__(0, ["#fff"])),
      /* :: */[
        Style$BsReactNative.fontSize(/* Float */Block.__(0, [24])),
        /* :: */[
          Style$BsReactNative.margin(/* Pt */Block.__(0, [10])),
          /* [] */0
        ]
      ]
    ]);

var Styles = /* module */[
  /* container */container,
  /* text */text
];

var component = ReasonReact.reducerComponent("Token");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(container), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[
                              ReasonReact.element(undefined, undefined, Button$BsReactNative.make(undefined, "#00BB72", undefined, (function (param) {
                                            return Curry._1(send, /* GenerateToken */0);
                                          }), undefined, "Generate Toke")(/* array */[])),
                              ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(text), undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[param[/* state */1][/* token */0]]))
                            ]));
            }),
          /* initialState */(function (param) {
              return /* record */[/* token */"init token"];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, param) {
              return /* Update */Block.__(0, [/* record */[/* token */randomString(/* () */0)]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var Token = /* module */[
  /* component */component,
  /* make */make
];

exports.chunk = chunk;
exports.randomString = randomString;
exports.Styles = Styles;
exports.Token = Token;
/* container Not a pure module */
